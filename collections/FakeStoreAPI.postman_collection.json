{
	"info": {
		"_postman_id": "629ccce5-d0b4-460f-bd03-c48755f56ecb",
		"name": "FakeStoreAPI",
		"description": "A free fake API for testing and prototyping e-commerce applications.\n\nContact Support:\n Email: support@fakestoreapi.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32220903"
	},
	"item": [
		{
			"name": "products",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get a single product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Verify response code\r",
											"pm.test(\"Response code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//Check method is as expected\r",
											"pm.test(\"Request method is GET\", () => {\r",
											"    pm.expect(pm.request.method).to.eql('GET');\r",
											"});\r",
											"//Check response time\r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/products/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "27141594",
											"description": "(Required) "
										}
									]
								},
								"description": "Retrieve details of a specific product by ID."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/products/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": -44567552,\n  \"title\": \"elit exercitation tempor fugiat\",\n  \"price\": 43588461.34434891,\n  \"description\": \"veniam ut nisi deserunt\",\n  \"category\": \"ex eu Ut\",\n  \"image\": \"https://mLQKlSOWHfrupp.uhXfEha.o.\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/products/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Verify response code\r",
											"pm.test(\"Response code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//Check method is as expected\r",
											"pm.test(\"Request method is PUT\", () => {\r",
											"    pm.expect(pm.request.method).to.eql('PUT');\r",
											"});\r",
											"//Check response body is as expected\r",
											"pm.test(\"Response body is as expected\", () => {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property('id', 27141594);\r",
											"    pm.expect(responseBody).to.have.property('title', \"elit exercitation tempor fugiat\");\r",
											"    pm.expect(responseBody).to.have.property('price', 43588461.34434891);\r",
											"});\r",
											"//Check response is as expected\r",
											"pm.test(\"Response is in expected format\", () => {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.be.an('object');\r",
											"});\r",
											"//Response time is less than expected\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": -44567552,\n  \"title\": \"elit exercitation tempor fugiat\",\n  \"price\": 43588461.34434891,\n  \"description\": \"veniam ut nisi deserunt\",\n  \"category\": \"ex eu Ut\",\n  \"image\": \"https://mLQKlSOWHfrupp.uhXfEha.o.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/products/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "27141594",
											"description": "(Required) "
										}
									]
								},
								"description": "Update an existing product by ID."
							},
							"response": [
								{
									"name": "Product updated successfully",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": -44567552,\n  \"title\": \"elit exercitation tempor fugiat\",\n  \"price\": 43588461.34434891,\n  \"description\": \"veniam ut nisi deserunt\",\n  \"category\": \"ex eu Ut\",\n  \"image\": \"https://mLQKlSOWHfrupp.uhXfEha.o.\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/products/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": -44567552,\n  \"title\": \"elit exercitation tempor fugiat\",\n  \"price\": 43588461.34434891,\n  \"description\": \"veniam ut nisi deserunt\",\n  \"category\": \"ex eu Ut\",\n  \"image\": \"https://mLQKlSOWHfrupp.uhXfEha.o.\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": -44567552,\n  \"title\": \"elit exercitation tempor fugiat\",\n  \"price\": 43588461.34434891,\n  \"description\": \"veniam ut nisi deserunt\",\n  \"category\": \"ex eu Ut\",\n  \"image\": \"https://mLQKlSOWHfrupp.uhXfEha.o.\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/products/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Verify response code\r",
											"pm.test(\"Response code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//Check method is as expected\r",
											"pm.test(\"Request method is DELETE\", () => {\r",
											"    pm.expect(pm.request.method).to.eql('DELETE');\r",
											"});\r",
											"//Check response time\r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "27141594",
											"description": "(Required) "
										}
									]
								},
								"description": "Delete a specific product by ID."
							},
							"response": [
								{
									"name": "Product deleted successfully",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/products/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/products/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response code\r",
									"pm.test(\"Response code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Check method is as expected\r",
									"pm.test(\"Request method is GET\", () => {\r",
									"    pm.expect(pm.request.method).to.eql('GET');\r",
									"});\r",
									"//Check response time\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						},
						"description": "Retrieve a list of all available products."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 82058336,\n    \"title\": \"est sit\",\n    \"price\": -25205641.675740883,\n    \"description\": \"irure officia\",\n    \"category\": \"nostrud \",\n    \"image\": \"https://eHSCXEcOItmHdHznHkPZPmbGWGXFu.krXAIHHXKUfGqCtVt5Svg7\"\n  },\n  {\n    \"id\": 37799370,\n    \"title\": \"aute exercitation et consectetur\",\n    \"price\": 6757909.391514525,\n    \"description\": \"sint aute ipsum\",\n    \"category\": \"sint\",\n    \"image\": \"http://jORDtSCTGhGgrOLYPNQChPwjriEqvlff.woi.Nu0G7fBnmzcaQqu+QGfYkgXTeMGpPpU3MwPP8lHQgJaI0Ms+GhTHJnI\"\n  }\n]"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add a new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response code\r",
									"pm.test(\"Response code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Check method is as expected\r",
									"pm.test(\"Request method is POST\", () => {\r",
									"    pm.expect(pm.request.method).to.eql('POST');\r",
									"});\r",
									"//Check response time\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"//Check response body\r",
									"pm.test(\"Response body contains expected data\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.be.a('number');\r",
									"    pm.expect(jsonData.title).to.be.a('string');\r",
									"    pm.expect(jsonData.price).to.be.a('number');\r",
									"    pm.expect(jsonData.description).to.be.a('string');\r",
									"    pm.expect(jsonData.image).to.be.a('string');\r",
									"    pm.expect(jsonData.category).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": -44567552,\n  \"title\": \"elit exercitation tempor fugiat\",\n  \"price\": 43588461.34434891,\n  \"description\": \"veniam ut nisi deserunt\",\n  \"category\": \"ex eu Ut\",\n  \"image\": \"https://mLQKlSOWHfrupp.uhXfEha.o.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						},
						"description": "Create a new product."
					},
					"response": [
						{
							"name": "Product created successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": -44567552,\n  \"title\": \"elit exercitation tempor fugiat\",\n  \"price\": 43588461.34434891,\n  \"description\": \"veniam ut nisi deserunt\",\n  \"category\": \"ex eu Ut\",\n  \"image\": \"https://mLQKlSOWHfrupp.uhXfEha.o.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -44567552,\n  \"title\": \"elit exercitation tempor fugiat\",\n  \"price\": 43588461.34434891,\n  \"description\": \"veniam ut nisi deserunt\",\n  \"category\": \"ex eu Ut\",\n  \"image\": \"https://mLQKlSOWHfrupp.uhXfEha.o.\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": -44567552,\n  \"title\": \"elit exercitation tempor fugiat\",\n  \"price\": 43588461.34434891,\n  \"description\": \"veniam ut nisi deserunt\",\n  \"category\": \"ex eu Ut\",\n  \"image\": \"https://mLQKlSOWHfrupp.uhXfEha.o.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "carts",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get a single cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Verify response code\r",
											"pm.test(\"Response code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//Check method is as expected\r",
											"pm.test(\"Request method is GET\", () => {\r",
											"    pm.expect(pm.request.method).to.eql('GET');\r",
											"});\r",
											"//Check response time\r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/carts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "27141594",
											"description": "(Required) "
										}
									]
								},
								"description": "Retrieve details of a specific cart by ID."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/carts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carts",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": 60097975,\n  \"userId\": -37114597,\n  \"products\": [\n    {\n      \"id\": 47112279,\n      \"title\": \"labore proident Lorem sed\",\n      \"price\": -25319089.84197682,\n      \"description\": \"amet laborum\",\n      \"category\": \"ad irur\",\n      \"image\": \"http://IPNqMIPiBMzsycirKNFqhMSokqWLJTsa.bcbOBFnpZYZ,bg35m,aXhom\"\n    },\n    {\n      \"id\": 49695852,\n      \"title\": \"est ut\",\n      \"price\": -51482449.009433195,\n      \"description\": \"velit\",\n      \"category\": \"irure nulla amet sit\",\n      \"image\": \"http://rMtnLgXh.uqxLxfon5cJ3HI5OuJ9tbH0iyu2GN+rcf+WMBrqSKLSfgvNYfGAoqASw\"\n    }\n  ]\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/carts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carts",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Verify response code\r",
											"pm.test(\"Response code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//Check method is as expected\r",
											"pm.test(\"Request method is PUT\", () => {\r",
											"    pm.expect(pm.request.method).to.eql('PUT');\r",
											"});\r",
											"//Check response body is as expected\r",
											"pm.test(\"Response body is as expected\", () => {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property('id', 27141594);\r",
											"    pm.expect(responseBody).to.have.property('title', \"elit exercitation tempor fugiat\");\r",
											"    pm.expect(responseBody).to.have.property('price', 43588461.34434891);\r",
											"});\r",
											"//Check response is as expected\r",
											"pm.test(\"Response is in expected format\", () => {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.be.an('object');\r",
											"});\r",
											"//Response time is less than expected\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 60097975,\n  \"userId\": -37114597,\n  \"products\": [\n    {\n      \"id\": 47112279,\n      \"title\": \"labore proident Lorem sed\",\n      \"price\": -25319089.84197682,\n      \"description\": \"amet laborum\",\n      \"category\": \"ad irur\",\n      \"image\": \"http://IPNqMIPiBMzsycirKNFqhMSokqWLJTsa.bcbOBFnpZYZ,bg35m,aXhom\"\n    },\n    {\n      \"id\": 49695852,\n      \"title\": \"est ut\",\n      \"price\": -51482449.009433195,\n      \"description\": \"velit\",\n      \"category\": \"irure nulla amet sit\",\n      \"image\": \"http://rMtnLgXh.uqxLxfon5cJ3HI5OuJ9tbH0iyu2GN+rcf+WMBrqSKLSfgvNYfGAoqASw\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "27141594",
											"description": "(Required) "
										}
									]
								},
								"description": "Update an existing cart by ID."
							},
							"response": [
								{
									"name": "Cart updated successfully",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": 44390865,\n  \"userId\": 3369261,\n  \"products\": [\n    {\n      \"id\": -24155665,\n      \"title\": \"culpa ipsum tempor\",\n      \"price\": -29478477.115184695,\n      \"description\": \"ad sunt cillum aute\",\n      \"category\": \"adipisicing Excepteur incididunt cillum\",\n      \"image\": \"http://O.zcwLz+RsNT4RLET2RBWK7BQ2uBTzCTa,-ec4.B1cd-kpi3lXEHf+Fq1Rj\"\n    },\n    {\n      \"id\": -53487428,\n      \"title\": \"Excepteur incididunt\",\n      \"price\": 73406950.29797441,\n      \"description\": \"qui in id\",\n      \"category\": \"in eu sint \",\n      \"image\": \"https://PVflbPfOtYhZPsVdIjSRCWXB.ndSBItqpAjEObd3dkX\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/carts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carts",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": 60097975,\n  \"userId\": -37114597,\n  \"products\": [\n    {\n      \"id\": 47112279,\n      \"title\": \"labore proident Lorem sed\",\n      \"price\": -25319089.84197682,\n      \"description\": \"amet laborum\",\n      \"category\": \"ad irur\",\n      \"image\": \"http://IPNqMIPiBMzsycirKNFqhMSokqWLJTsa.bcbOBFnpZYZ,bg35m,aXhom\"\n    },\n    {\n      \"id\": 49695852,\n      \"title\": \"est ut\",\n      \"price\": -51482449.009433195,\n      \"description\": \"velit\",\n      \"category\": \"irure nulla amet sit\",\n      \"image\": \"http://rMtnLgXh.uqxLxfon5cJ3HI5OuJ9tbH0iyu2GN+rcf+WMBrqSKLSfgvNYfGAoqASw\"\n    }\n  ]\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": 44390865,\n  \"userId\": 3369261,\n  \"products\": [\n    {\n      \"id\": -24155665,\n      \"title\": \"culpa ipsum tempor\",\n      \"price\": -29478477.115184695,\n      \"description\": \"ad sunt cillum aute\",\n      \"category\": \"adipisicing Excepteur incididunt cillum\",\n      \"image\": \"http://O.zcwLz+RsNT4RLET2RBWK7BQ2uBTzCTa,-ec4.B1cd-kpi3lXEHf+Fq1Rj\"\n    },\n    {\n      \"id\": -53487428,\n      \"title\": \"Excepteur incididunt\",\n      \"price\": 73406950.29797441,\n      \"description\": \"qui in id\",\n      \"category\": \"in eu sint \",\n      \"image\": \"https://PVflbPfOtYhZPsVdIjSRCWXB.ndSBItqpAjEObd3dkX\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/carts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carts",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Verify response code\r",
											"pm.test(\"Response code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//Check method is as expected\r",
											"pm.test(\"Request method is DELETE\", () => {\r",
											"    pm.expect(pm.request.method).to.eql('DELETE');\r",
											"});\r",
											"//Check response time\r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/carts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "27141594",
											"description": "(Required) "
										}
									]
								},
								"description": "Delete a specific cart by ID."
							},
							"response": [
								{
									"name": "Cart deleted successfully",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/carts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carts",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/carts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"carts",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get all carts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response code\r",
									"pm.test(\"Response code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Check method is as expected\r",
									"pm.test(\"Request method is GET\", () => {\r",
									"    pm.expect(pm.request.method).to.eql('GET');\r",
									"});\r",
									"//Check response time\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/carts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts"
							]
						},
						"description": "Retrieve a list of all available carts."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/carts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 24738917,\n    \"userId\": -16330537,\n    \"products\": [\n      {\n        \"id\": -7177594,\n        \"title\": \"minim voluptate\",\n        \"price\": 44823059.04026222,\n        \"description\": \"anim nulla\",\n        \"category\": \"eu est do nisi nostrud\",\n        \"image\": \"https://wrZgjEgTOIAtESlldyWCZoSKRP.zbpiOVtu5+wJ\"\n      },\n      {\n        \"id\": 35032910,\n        \"title\": \"voluptate aliquip aliqua\",\n        \"price\": 440057.4273715019,\n        \"description\": \"anim sed deserunt pariatur Lorem\",\n        \"category\": \"nisi minim esse sunt\",\n        \"image\": \"https://KfobMqqBTyvuYCdoSxxgvdl.wyGxWVxNifh8grMxlooa.Lb9E\"\n      }\n    ]\n  },\n  {\n    \"id\": 854987,\n    \"userId\": 65812659,\n    \"products\": [\n      {\n        \"id\": 23771693,\n        \"title\": \"laboris aliqua ut\",\n        \"price\": 29076117.32048963,\n        \"description\": \"sed nulla laborum ipsum culp\",\n        \"category\": \"quis sed in\",\n        \"image\": \"http://BJmVvNIur.zyueT1hqD2N3wTRYNsqRvacXKwxGiujFQojmmzsU\"\n      },\n      {\n        \"id\": 16469167,\n        \"title\": \"incididunt minim cupidatat aute\",\n        \"price\": -10660513.339441419,\n        \"description\": \"commodo\",\n        \"category\": \"sint\",\n        \"image\": \"http://yHJTffkzkSFvVAUEsSxposaazKF.exhRQSE+i6QdL,Y+LzAHxI3WpnS1X70W1jssc+zSMl7M.JmMuAULmx.f0V-l2qXS0pEkgZHN74.rF\"\n      }\n    ]\n  }\n]"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/carts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carts"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add a new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response code\r",
									"pm.test(\"Response code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Check method is as expected\r",
									"pm.test(\"Request method is POST\", () => {\r",
									"    pm.expect(pm.request.method).to.eql('POST');\r",
									"});\r",
									"//Check response time\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"//Check response body\r",
									"pm.test(\"Response body contains expected data\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.be.a('number');\r",
									"    pm.expect(jsonData.title).to.be.a('string');\r",
									"    pm.expect(jsonData.price).to.be.a('number');\r",
									"    pm.expect(jsonData.description).to.be.a('string');\r",
									"    pm.expect(jsonData.image).to.be.a('string');\r",
									"    pm.expect(jsonData.category).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 60097975,\n  \"userId\": -37114597,\n  \"products\": [\n    {\n      \"id\": 47112279,\n      \"title\": \"labore proident Lorem sed\",\n      \"price\": -25319089.84197682,\n      \"description\": \"amet laborum\",\n      \"category\": \"ad irur\",\n      \"image\": \"http://IPNqMIPiBMzsycirKNFqhMSokqWLJTsa.bcbOBFnpZYZ,bg35m,aXhom\"\n    },\n    {\n      \"id\": 49695852,\n      \"title\": \"est ut\",\n      \"price\": -51482449.009433195,\n      \"description\": \"velit\",\n      \"category\": \"irure nulla amet sit\",\n      \"image\": \"http://rMtnLgXh.uqxLxfon5cJ3HI5OuJ9tbH0iyu2GN+rcf+WMBrqSKLSfgvNYfGAoqASw\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts"
							]
						},
						"description": "Create a new cart."
					},
					"response": [
						{
							"name": "Cart created successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 44390865,\n  \"userId\": 3369261,\n  \"products\": [\n    {\n      \"id\": -24155665,\n      \"title\": \"culpa ipsum tempor\",\n      \"price\": -29478477.115184695,\n      \"description\": \"ad sunt cillum aute\",\n      \"category\": \"adipisicing Excepteur incididunt cillum\",\n      \"image\": \"http://O.zcwLz+RsNT4RLET2RBWK7BQ2uBTzCTa,-ec4.B1cd-kpi3lXEHf+Fq1Rj\"\n    },\n    {\n      \"id\": -53487428,\n      \"title\": \"Excepteur incididunt\",\n      \"price\": 73406950.29797441,\n      \"description\": \"qui in id\",\n      \"category\": \"in eu sint \",\n      \"image\": \"https://PVflbPfOtYhZPsVdIjSRCWXB.ndSBItqpAjEObd3dkX\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carts"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 60097975,\n  \"userId\": -37114597,\n  \"products\": [\n    {\n      \"id\": 47112279,\n      \"title\": \"labore proident Lorem sed\",\n      \"price\": -25319089.84197682,\n      \"description\": \"amet laborum\",\n      \"category\": \"ad irur\",\n      \"image\": \"http://IPNqMIPiBMzsycirKNFqhMSokqWLJTsa.bcbOBFnpZYZ,bg35m,aXhom\"\n    },\n    {\n      \"id\": 49695852,\n      \"title\": \"est ut\",\n      \"price\": -51482449.009433195,\n      \"description\": \"velit\",\n      \"category\": \"irure nulla amet sit\",\n      \"image\": \"http://rMtnLgXh.uqxLxfon5cJ3HI5OuJ9tbH0iyu2GN+rcf+WMBrqSKLSfgvNYfGAoqASw\"\n    }\n  ]\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 44390865,\n  \"userId\": 3369261,\n  \"products\": [\n    {\n      \"id\": -24155665,\n      \"title\": \"culpa ipsum tempor\",\n      \"price\": -29478477.115184695,\n      \"description\": \"ad sunt cillum aute\",\n      \"category\": \"adipisicing Excepteur incididunt cillum\",\n      \"image\": \"http://O.zcwLz+RsNT4RLET2RBWK7BQ2uBTzCTa,-ec4.B1cd-kpi3lXEHf+Fq1Rj\"\n    },\n    {\n      \"id\": -53487428,\n      \"title\": \"Excepteur incididunt\",\n      \"price\": 73406950.29797441,\n      \"description\": \"qui in id\",\n      \"category\": \"in eu sint \",\n      \"image\": \"https://PVflbPfOtYhZPsVdIjSRCWXB.ndSBItqpAjEObd3dkX\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carts"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get a single user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Verify response code\r",
											"pm.test(\"Response code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//Check method is as expected\r",
											"pm.test(\"Request method is GET\", () => {\r",
											"    pm.expect(pm.request.method).to.eql('GET');\r",
											"});\r",
											"//Check response time\r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "27141594",
											"description": "(Required) "
										}
									]
								},
								"description": "Retrieve details of a specific user by ID."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": -90958671,\n  \"username\": \"consequat quis\",\n  \"email\": \"sit velit nisi laboris ea\",\n  \"password\": \"ea et ex in est\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Verify response code\r",
											"pm.test(\"Response code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//Check method is as expected\r",
											"pm.test(\"Request method is PUT\", () => {\r",
											"    pm.expect(pm.request.method).to.eql('PUT');\r",
											"});\r",
											"//Check response body is as expected\r",
											"pm.test(\"Response body is as expected\", () => {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property('id', 27141594);\r",
											"    pm.expect(responseBody).to.have.property('title', \"elit exercitation tempor fugiat\");\r",
											"    pm.expect(responseBody).to.have.property('price', 43588461.34434891);\r",
											"});\r",
											"//Check response is as expected\r",
											"pm.test(\"Response is in expected format\", () => {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.be.an('object');\r",
											"});\r",
											"//Response time is less than expected\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": -90958671,\n  \"username\": \"consequat quis\",\n  \"email\": \"sit velit nisi laboris ea\",\n  \"password\": \"ea et ex in est\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "27141594",
											"description": "(Required) "
										}
									]
								},
								"description": "Update an existing user by ID."
							},
							"response": [
								{
									"name": "User updated successfully",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": -90958671,\n  \"username\": \"consequat quis\",\n  \"email\": \"sit velit nisi laboris ea\",\n  \"password\": \"ea et ex in est\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": -90958671,\n  \"username\": \"consequat quis\",\n  \"email\": \"sit velit nisi laboris ea\",\n  \"password\": \"ea et ex in est\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": -90958671,\n  \"username\": \"consequat quis\",\n  \"email\": \"sit velit nisi laboris ea\",\n  \"password\": \"ea et ex in est\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Verify response code\r",
											"pm.test(\"Response code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//Check method is as expected\r",
											"pm.test(\"Request method is DELETE\", () => {\r",
											"    pm.expect(pm.request.method).to.eql('DELETE');\r",
											"});\r",
											"//Check response time\r",
											"pm.test(\"Response time is less than 1000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "27141594",
											"description": "(Required) "
										}
									]
								},
								"description": "Delete a specific user by ID."
							},
							"response": [
								{
									"name": "User deleted successfully",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "27141594",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response code\r",
									"pm.test(\"Response code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Check method is as expected\r",
									"pm.test(\"Request method is GET\", () => {\r",
									"    pm.expect(pm.request.method).to.eql('GET');\r",
									"});\r",
									"//Check response time\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Retrieve a list of all users."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 54609707,\n    \"username\": \"incididunt nisi et\",\n    \"email\": \"in\",\n    \"password\": \"ex magna\"\n  },\n  {\n    \"id\": 68425977,\n    \"username\": \"id in amet est\",\n    \"email\": \"nulla Lorem irure repre\",\n    \"password\": \"et magna sunt qui est\"\n  }\n]"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response code\r",
									"pm.test(\"Response code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Check method is as expected\r",
									"pm.test(\"Request method is POST\", () => {\r",
									"    pm.expect(pm.request.method).to.eql('POST');\r",
									"});\r",
									"//Check response time\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"//Check response body\r",
									"pm.test(\"Response body contains expected data\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.be.a('number');\r",
									"    pm.expect(jsonData.title).to.be.a('string');\r",
									"    pm.expect(jsonData.price).to.be.a('number');\r",
									"    pm.expect(jsonData.description).to.be.a('string');\r",
									"    pm.expect(jsonData.image).to.be.a('string');\r",
									"    pm.expect(jsonData.category).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": -90958671,\n  \"username\": \"consequat quis\",\n  \"email\": \"sit velit nisi laboris ea\",\n  \"password\": \"ea et ex in est\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Create a new user."
					},
					"response": [
						{
							"name": "User created successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": -90958671,\n  \"username\": \"consequat quis\",\n  \"email\": \"sit velit nisi laboris ea\",\n  \"password\": \"ea et ex in est\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -90958671,\n  \"username\": \"consequat quis\",\n  \"email\": \"sit velit nisi laboris ea\",\n  \"password\": \"ea et ex in est\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": -90958671,\n  \"username\": \"consequat quis\",\n  \"email\": \"sit velit nisi laboris ea\",\n  \"password\": \"ea et ex in est\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verify response code\r",
							"pm.test(\"Response code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Check method is as expected\r",
							"pm.test(\"Request method is POST\", () => {\r",
							"    pm.expect(pm.request.method).to.eql('POST');\r",
							"});\r",
							"//Check response time\r",
							"pm.test(\"Response time is less than 1000ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"//Check response body\r",
							"pm.test(\"Response body contains expected data\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.be.a('number');\r",
							"    pm.expect(jsonData.title).to.be.a('string');\r",
							"    pm.expect(jsonData.price).to.be.a('number');\r",
							"    pm.expect(jsonData.description).to.be.a('string');\r",
							"    pm.expect(jsonData.image).to.be.a('string');\r",
							"    pm.expect(jsonData.category).to.be.a('string');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"do laborum\",\n  \"password\": \"officia aliquip\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				},
				"description": "Authenticate a user."
			},
			"response": [
				{
					"name": "Login successful",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"do laborum\",\n  \"password\": \"officia aliquip\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"token\": \"eiusmod id\"\n}"
				},
				{
					"name": "Bad request",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"do laborum\",\n  \"password\": \"officia aliquip\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://fakestoreapi.com",
			"type": "string"
		}
	]
}